Server

Um mit externen Programmen zu kommunizieren wird die Netzwerkschnittstelle verwendet.
Dafür läuft im Programm einen Serverinstance, die von sich aus dann die Solvis-Threads startet.
Pro Anlage läuft ein Thread, der u.U. weitere Threads startet.
Der Client teilt dem Server den Namen und URL der Solvis-Anklage mit.


Ferner gibt es folgende Einstellmöglichkeiten:

-	Solvis-Mode			(Tag, Nacht, Standby, Urlaub, Timer )
-	Temperaturen			(Tag/Nacht)
-	Raumabhängigkeit	(0 - 90%)
-   Heizwasserpumpe		Ein/Aus/Auto

Diese Einstellungen werden auch regelmäßig geprüft, falls eine manueller Eingriff an der
  Console erkannt wurde. Es werden dann entsprechnde Events erzeugt, so dass Readings o.ä.
  z.B. im FHEm abgedatzed werden.
  
  
  
  Vorgang des Starts einer Solvis-Verbindung, welche schon angelernt ist
  
  1. Client -> Server:
  		Anforderung der Datenstruktur
  		
  2. Server -> Client
  		liefert die Datenstruktur zurück, mit den Modi
  		
  3 ... n:  Server -> Client
  		veränderte Werte
  		
  
  
  Das Interface beherrscht auch einen Standalone-Mode. Dann definiert das XML-File die
  notwendigen Connection-Daten und FHEM kann sich beliebig häufig konnektieren.
  In diesem Fall sind in der Regel die Interface-Daten aktueller und es erfolgt kein
  Update von der Solvis-Seite
  
  
  
  Transfer-Format:
  
    Ein Paket beginnt immer mit 3 Bytes, der die Länge des anschließenden Datenblockes festlegt.
    Das erste Byte ist das MSB, das dritte das LSB. Damit kann ein Paket aus max. 16.777.216 Zeichen
    bestehen. Auf diese Weise wird auf einfacher Weise sicher gestellt, dass erst ein kompletter
    Datenblock eingelesen ist, ehe man mit der UTF-8-Interpretation beginnt.
    
    
    Datenblock-Format:
    
    	Format: UTF-8
  
	    Um möglichst Perl wenig zu belasten, wird ein sehr einfaches propritäres Format, das ähnlich JSON ist
	    verwendet.
	    Die Struktur sieht wie folgt aus:
	    
	      { <Command/Event>: { "System": <Systemname>, "Werte": {Name1: Wert1 ,  Name2: Wert2 , Name3: Wert3 .... }}}
	      
	      Dieses Format wird verwendet, bei veränderten Werten Server -> Client
	      aber auch bei SET von Client -> Server
	      
	    Die Struktur für die Datendefinition ist etwas komplizierter:
	    
	      { "Structure": { "Name": <Name1>, "Beschreibung": { "Unit": <value> }, "Name": <Name2>, "Beschreibung": { "StatusValues": [ "Standby", "Tag", "Nacht" ] } } }
	      
	    Die Verarbeitung erfolgt rekursiv und wird in einem hash gespeichert.
	    
	    Ob das Paket komplett ist, kann durch zählen der öffnenden und schließenden Klammern vor der eigentlichen
	    Interpretation erfolgen,da die Werte keins der Zeichen {[]} beinhaltet. 