; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName       "SolvisSmartHomeServer"
#define MyInstallerName "SolvisSmartHomeServer setup"
#define MyAppVersion    "1.1.0"
#define MyAppExeName    "Startup.bat"
#define MyJarFile       "SolvisSmartHomeServer.jar"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{CCDE2384-401A-40B6-B757-5627A2072B79}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName=C:\JavaPgms\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
InfoAfterFile=E:\Eigene Dateien\Programmierung\Java\workspace\SolvisServer\publish\CHANGES.txt
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=admin
;PrivilegesRequiredOverridesAllowed=dialog
OutputBaseFilename={#MyInstallerName}
Compression=lzma
SolidCompression=yes
WizardStyle=modern
ArchitecturesInstallIn64BitMode=x64
RestartIfNeededByRun=no

;[Languages]
;Name: "english"; MessagesFile: "compiler:Default.isl"
;Name: "german"; MessagesFile: "compiler:Languages\German.isl"

[Tasks]
Name: "runOnWindowsStart"; Description: "Start with windows"; 

[Files]
Source: "Startup.bat"; DestDir: "{app}"; Flags: ignoreversion; 
Source: "..\..\publish\base.xml.new"; DestDir: "{app}"; Flags: ignoreversion;
Source: "..\..\publish\base.xsd"; DestDir: "{app}"; Flags: ignoreversion;
Source: "..\..\publish\CHANGES.txt"; DestDir: "{app}"; Flags: ignoreversion;
Source: "..\..\publish\SolvisSmartHomeServer.jar"; DestDir: "{app}"; Flags: ignoreversion;
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "javaw";  Parameters: "-jar {app}\{#MyJarFile}";
Name: "{group}\{#MyAppName} im DOS-Fenster"; Filename: "{app}\{#MyAppExeName}"; Parameters: "dos";    
Name: "{group}\Learn"; Filename: "{app}\Startup.bat"; Parameters: "learn";
Name: "{group}\Terminate"; Filename: "javaw";  Parameters: "-jar {app}\{#MyJarFile} --server-terminate";
Name: "{group}\Crypt"; Filename: "{app}\{#MyAppExeName}"; Parameters: "crypt";
Name: "{group}\Uninstall {#MyAppName}}"; Filename: "{uninstallexe}"
;Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "schtasks"; Description: "Schedule on booting"; Parameters: "/create /sc ONSTART /tn SolvisSmartHomeServerTask /tr ""{app}\Startup.bat"" /f"; Tasks: runOnWindowsStart
;Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: shellexec postinstall skipifsilent

[UninstallRun]
Filename: "schtasks"; Parameters: "/delete /tn SolvisSmartHomeServerTask /f";  RunOnceId: "SolvisScheduler"; 


[Code]
function LoadValueFromXML(const AFileName, APath: string): string;
var
	XMLNode: Variant;
	XMLDocument: Variant;  
begin
	Log('Get Xml text node: ' + AFileName);
	Result := '';
	XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
	try
		XMLDocument.async := False;
		XMLDocument.load(AFileName);
		if (XMLDocument.parseError.errorCode <> 0) then
			MsgBox('The XML file could not be parsed. ' + XMLDocument.parseError.reason, mbError, MB_OK)
		else begin
			XMLDocument.setProperty('SelectionLanguage', 'XPath');
			XMLNode := XMLDocument.selectSingleNode(APath);
			Result := XMLNode.text;
		end;
	except
		MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
	end;
end;
procedure SaveValueToXML(const AFileName, APath, AValue: string);
var
	XMLNode: Variant;
	XMLDocument: Variant;  
begin
	Log('Save Xml text node: ' + AFileName);
	XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
	try
		XMLDocument.async := False;
		XMLDocument.load(AFileName);
		if (XMLDocument.parseError.errorCode <> 0) then
			MsgBox('The XML file could not be parsed. ' + XMLDocument.parseError.reason, mbError, MB_OK)
		else begin
			XMLDocument.setProperty('SelectionLanguage', 'XPath');
			XMLNode := XMLDocument.selectSingleNode(APath);
			XMLNode.text := AValue;
			XMLDocument.save(AFileName);
		end;
	except
		MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);
	end;
end;
procedure SaveAttributeValueToXML(const AFileName, APath, AAttribute, AValue: string);
var
	XMLNode: Variant;
	XMLDocument: Variant;  
begin
	Log('Save Xml attr: ' + AFileName);
	XMLDocument := CreateOleObject('Msxml2.DOMDocument.6.0');
	try
		XMLDocument.async := False;
		XMLDocument.load(AFileName);
		if (XMLDocument.parseError.errorCode <> 0) then
			MsgBox('The XML file could not be parsed. ' + XMLDocument.parseError.reason, mbError, MB_OK)
		else begin
			XMLDocument.setProperty('SelectionLanguage', 'XPath');
			XMLNode := XMLDocument.selectSingleNode(APath);
			XMLNode.setAttribute(AAttribute, AValue);
			XMLDocument.save(AFileName);
		end;
	except
		MsgBox('An error occured!' + #13#10 + GetExceptionMessage, mbError, MB_OK);  
	end;
end;